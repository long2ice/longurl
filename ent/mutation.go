// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/long2ice/longurl/ent/predicate"
	"github.com/long2ice/longurl/ent/url"
	"github.com/long2ice/longurl/ent/visitlog"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUrl      = "Url"
	TypeVisitLog = "VisitLog"
)

// URLMutation represents an operation that mutates the Url nodes in the graph.
type URLMutation struct {
	config
	op            Op
	typ           string
	id            *int
	url           *string
	_path         *string
	expire_at     *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	logs          map[int]struct{}
	removedlogs   map[int]struct{}
	clearedlogs   bool
	done          bool
	oldValue      func(context.Context) (*Url, error)
	predicates    []predicate.Url
}

var _ ent.Mutation = (*URLMutation)(nil)

// urlOption allows management of the mutation configuration using functional options.
type urlOption func(*URLMutation)

// newURLMutation creates new mutation for the Url entity.
func newURLMutation(c config, op Op, opts ...urlOption) *URLMutation {
	m := &URLMutation{
		config:        c,
		op:            op,
		typ:           TypeUrl,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUrlID sets the ID field of the mutation.
func withUrlID(id int) urlOption {
	return func(m *URLMutation) {
		var (
			err   error
			once  sync.Once
			value *Url
		)
		m.oldValue = func(ctx context.Context) (*Url, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Url.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUrl sets the old Url of the mutation.
func withUrl(node *Url) urlOption {
	return func(m *URLMutation) {
		m.oldValue = func(context.Context) (*Url, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m URLMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m URLMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *URLMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *URLMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Url.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *URLMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *URLMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *URLMutation) ResetURL() {
	m.url = nil
}

// SetPath sets the "path" field.
func (m *URLMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *URLMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *URLMutation) ResetPath() {
	m._path = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *URLMutation) SetExpireAt(t time.Time) {
	m.expire_at = &t
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *URLMutation) ExpireAt() (r time.Time, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldExpireAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// ClearExpireAt clears the value of the "expire_at" field.
func (m *URLMutation) ClearExpireAt() {
	m.expire_at = nil
	m.clearedFields[url.FieldExpireAt] = struct{}{}
}

// ExpireAtCleared returns if the "expire_at" field was cleared in this mutation.
func (m *URLMutation) ExpireAtCleared() bool {
	_, ok := m.clearedFields[url.FieldExpireAt]
	return ok
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *URLMutation) ResetExpireAt() {
	m.expire_at = nil
	delete(m.clearedFields, url.FieldExpireAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *URLMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *URLMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *URLMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddLogIDs adds the "logs" edge to the VisitLog entity by ids.
func (m *URLMutation) AddLogIDs(ids ...int) {
	if m.logs == nil {
		m.logs = make(map[int]struct{})
	}
	for i := range ids {
		m.logs[ids[i]] = struct{}{}
	}
}

// ClearLogs clears the "logs" edge to the VisitLog entity.
func (m *URLMutation) ClearLogs() {
	m.clearedlogs = true
}

// LogsCleared reports if the "logs" edge to the VisitLog entity was cleared.
func (m *URLMutation) LogsCleared() bool {
	return m.clearedlogs
}

// RemoveLogIDs removes the "logs" edge to the VisitLog entity by IDs.
func (m *URLMutation) RemoveLogIDs(ids ...int) {
	if m.removedlogs == nil {
		m.removedlogs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.logs, ids[i])
		m.removedlogs[ids[i]] = struct{}{}
	}
}

// RemovedLogs returns the removed IDs of the "logs" edge to the VisitLog entity.
func (m *URLMutation) RemovedLogsIDs() (ids []int) {
	for id := range m.removedlogs {
		ids = append(ids, id)
	}
	return
}

// LogsIDs returns the "logs" edge IDs in the mutation.
func (m *URLMutation) LogsIDs() (ids []int) {
	for id := range m.logs {
		ids = append(ids, id)
	}
	return
}

// ResetLogs resets all changes to the "logs" edge.
func (m *URLMutation) ResetLogs() {
	m.logs = nil
	m.clearedlogs = false
	m.removedlogs = nil
}

// Where appends a list predicates to the URLMutation builder.
func (m *URLMutation) Where(ps ...predicate.Url) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *URLMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Url).
func (m *URLMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *URLMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.url != nil {
		fields = append(fields, url.FieldURL)
	}
	if m._path != nil {
		fields = append(fields, url.FieldPath)
	}
	if m.expire_at != nil {
		fields = append(fields, url.FieldExpireAt)
	}
	if m.created_at != nil {
		fields = append(fields, url.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *URLMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case url.FieldURL:
		return m.URL()
	case url.FieldPath:
		return m.Path()
	case url.FieldExpireAt:
		return m.ExpireAt()
	case url.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *URLMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case url.FieldURL:
		return m.OldURL(ctx)
	case url.FieldPath:
		return m.OldPath(ctx)
	case url.FieldExpireAt:
		return m.OldExpireAt(ctx)
	case url.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Url field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *URLMutation) SetField(name string, value ent.Value) error {
	switch name {
	case url.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case url.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case url.FieldExpireAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	case url.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Url field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *URLMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *URLMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *URLMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Url numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *URLMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(url.FieldExpireAt) {
		fields = append(fields, url.FieldExpireAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *URLMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *URLMutation) ClearField(name string) error {
	switch name {
	case url.FieldExpireAt:
		m.ClearExpireAt()
		return nil
	}
	return fmt.Errorf("unknown Url nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *URLMutation) ResetField(name string) error {
	switch name {
	case url.FieldURL:
		m.ResetURL()
		return nil
	case url.FieldPath:
		m.ResetPath()
		return nil
	case url.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	case url.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Url field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *URLMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.logs != nil {
		edges = append(edges, url.EdgeLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *URLMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case url.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.logs))
		for id := range m.logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *URLMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlogs != nil {
		edges = append(edges, url.EdgeLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *URLMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case url.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.removedlogs))
		for id := range m.removedlogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *URLMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlogs {
		edges = append(edges, url.EdgeLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *URLMutation) EdgeCleared(name string) bool {
	switch name {
	case url.EdgeLogs:
		return m.clearedlogs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *URLMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Url unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *URLMutation) ResetEdge(name string) error {
	switch name {
	case url.EdgeLogs:
		m.ResetLogs()
		return nil
	}
	return fmt.Errorf("unknown Url edge %s", name)
}

// VisitLogMutation represents an operation that mutates the VisitLog nodes in the graph.
type VisitLogMutation struct {
	config
	op              Op
	typ             string
	id              *int
	platform        *string
	os              *string
	ip              *string
	referer         *string
	engine_name     *string
	engine_version  *string
	browser_name    *string
	browser_version *string
	mozilla         *string
	bot             *bool
	mobile          *bool
	created_at      *time.Time
	clearedFields   map[string]struct{}
	url             *int
	clearedurl      bool
	done            bool
	oldValue        func(context.Context) (*VisitLog, error)
	predicates      []predicate.VisitLog
}

var _ ent.Mutation = (*VisitLogMutation)(nil)

// visitlogOption allows management of the mutation configuration using functional options.
type visitlogOption func(*VisitLogMutation)

// newVisitLogMutation creates new mutation for the VisitLog entity.
func newVisitLogMutation(c config, op Op, opts ...visitlogOption) *VisitLogMutation {
	m := &VisitLogMutation{
		config:        c,
		op:            op,
		typ:           TypeVisitLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVisitLogID sets the ID field of the mutation.
func withVisitLogID(id int) visitlogOption {
	return func(m *VisitLogMutation) {
		var (
			err   error
			once  sync.Once
			value *VisitLog
		)
		m.oldValue = func(ctx context.Context) (*VisitLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VisitLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVisitLog sets the old VisitLog of the mutation.
func withVisitLog(node *VisitLog) visitlogOption {
	return func(m *VisitLogMutation) {
		m.oldValue = func(context.Context) (*VisitLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VisitLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VisitLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VisitLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VisitLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VisitLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPlatform sets the "platform" field.
func (m *VisitLogMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *VisitLogMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *VisitLogMutation) ResetPlatform() {
	m.platform = nil
}

// SetOs sets the "os" field.
func (m *VisitLogMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *VisitLogMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ResetOs resets all changes to the "os" field.
func (m *VisitLogMutation) ResetOs() {
	m.os = nil
}

// SetIP sets the "ip" field.
func (m *VisitLogMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *VisitLogMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *VisitLogMutation) ResetIP() {
	m.ip = nil
}

// SetReferer sets the "referer" field.
func (m *VisitLogMutation) SetReferer(s string) {
	m.referer = &s
}

// Referer returns the value of the "referer" field in the mutation.
func (m *VisitLogMutation) Referer() (r string, exists bool) {
	v := m.referer
	if v == nil {
		return
	}
	return *v, true
}

// OldReferer returns the old "referer" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldReferer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferer: %w", err)
	}
	return oldValue.Referer, nil
}

// ResetReferer resets all changes to the "referer" field.
func (m *VisitLogMutation) ResetReferer() {
	m.referer = nil
}

// SetEngineName sets the "engine_name" field.
func (m *VisitLogMutation) SetEngineName(s string) {
	m.engine_name = &s
}

// EngineName returns the value of the "engine_name" field in the mutation.
func (m *VisitLogMutation) EngineName() (r string, exists bool) {
	v := m.engine_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEngineName returns the old "engine_name" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldEngineName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngineName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngineName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngineName: %w", err)
	}
	return oldValue.EngineName, nil
}

// ResetEngineName resets all changes to the "engine_name" field.
func (m *VisitLogMutation) ResetEngineName() {
	m.engine_name = nil
}

// SetEngineVersion sets the "engine_version" field.
func (m *VisitLogMutation) SetEngineVersion(s string) {
	m.engine_version = &s
}

// EngineVersion returns the value of the "engine_version" field in the mutation.
func (m *VisitLogMutation) EngineVersion() (r string, exists bool) {
	v := m.engine_version
	if v == nil {
		return
	}
	return *v, true
}

// OldEngineVersion returns the old "engine_version" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldEngineVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngineVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngineVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngineVersion: %w", err)
	}
	return oldValue.EngineVersion, nil
}

// ResetEngineVersion resets all changes to the "engine_version" field.
func (m *VisitLogMutation) ResetEngineVersion() {
	m.engine_version = nil
}

// SetBrowserName sets the "browser_name" field.
func (m *VisitLogMutation) SetBrowserName(s string) {
	m.browser_name = &s
}

// BrowserName returns the value of the "browser_name" field in the mutation.
func (m *VisitLogMutation) BrowserName() (r string, exists bool) {
	v := m.browser_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowserName returns the old "browser_name" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldBrowserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowserName: %w", err)
	}
	return oldValue.BrowserName, nil
}

// ResetBrowserName resets all changes to the "browser_name" field.
func (m *VisitLogMutation) ResetBrowserName() {
	m.browser_name = nil
}

// SetBrowserVersion sets the "browser_version" field.
func (m *VisitLogMutation) SetBrowserVersion(s string) {
	m.browser_version = &s
}

// BrowserVersion returns the value of the "browser_version" field in the mutation.
func (m *VisitLogMutation) BrowserVersion() (r string, exists bool) {
	v := m.browser_version
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowserVersion returns the old "browser_version" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldBrowserVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrowserVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrowserVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowserVersion: %w", err)
	}
	return oldValue.BrowserVersion, nil
}

// ResetBrowserVersion resets all changes to the "browser_version" field.
func (m *VisitLogMutation) ResetBrowserVersion() {
	m.browser_version = nil
}

// SetMozilla sets the "mozilla" field.
func (m *VisitLogMutation) SetMozilla(s string) {
	m.mozilla = &s
}

// Mozilla returns the value of the "mozilla" field in the mutation.
func (m *VisitLogMutation) Mozilla() (r string, exists bool) {
	v := m.mozilla
	if v == nil {
		return
	}
	return *v, true
}

// OldMozilla returns the old "mozilla" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldMozilla(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMozilla is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMozilla requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMozilla: %w", err)
	}
	return oldValue.Mozilla, nil
}

// ResetMozilla resets all changes to the "mozilla" field.
func (m *VisitLogMutation) ResetMozilla() {
	m.mozilla = nil
}

// SetBot sets the "bot" field.
func (m *VisitLogMutation) SetBot(b bool) {
	m.bot = &b
}

// Bot returns the value of the "bot" field in the mutation.
func (m *VisitLogMutation) Bot() (r bool, exists bool) {
	v := m.bot
	if v == nil {
		return
	}
	return *v, true
}

// OldBot returns the old "bot" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldBot(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBot: %w", err)
	}
	return oldValue.Bot, nil
}

// ResetBot resets all changes to the "bot" field.
func (m *VisitLogMutation) ResetBot() {
	m.bot = nil
}

// SetMobile sets the "mobile" field.
func (m *VisitLogMutation) SetMobile(b bool) {
	m.mobile = &b
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *VisitLogMutation) Mobile() (r bool, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldMobile(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *VisitLogMutation) ResetMobile() {
	m.mobile = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *VisitLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VisitLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VisitLog entity.
// If the VisitLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VisitLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetURLID sets the "url" edge to the Url entity by id.
func (m *VisitLogMutation) SetURLID(id int) {
	m.url = &id
}

// ClearURL clears the "url" edge to the Url entity.
func (m *VisitLogMutation) ClearURL() {
	m.clearedurl = true
}

// URLCleared reports if the "url" edge to the Url entity was cleared.
func (m *VisitLogMutation) URLCleared() bool {
	return m.clearedurl
}

// URLID returns the "url" edge ID in the mutation.
func (m *VisitLogMutation) URLID() (id int, exists bool) {
	if m.url != nil {
		return *m.url, true
	}
	return
}

// URLIDs returns the "url" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// URLID instead. It exists only for internal usage by the builders.
func (m *VisitLogMutation) URLIDs() (ids []int) {
	if id := m.url; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetURL resets all changes to the "url" edge.
func (m *VisitLogMutation) ResetURL() {
	m.url = nil
	m.clearedurl = false
}

// Where appends a list predicates to the VisitLogMutation builder.
func (m *VisitLogMutation) Where(ps ...predicate.VisitLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VisitLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VisitLog).
func (m *VisitLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VisitLogMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.platform != nil {
		fields = append(fields, visitlog.FieldPlatform)
	}
	if m.os != nil {
		fields = append(fields, visitlog.FieldOs)
	}
	if m.ip != nil {
		fields = append(fields, visitlog.FieldIP)
	}
	if m.referer != nil {
		fields = append(fields, visitlog.FieldReferer)
	}
	if m.engine_name != nil {
		fields = append(fields, visitlog.FieldEngineName)
	}
	if m.engine_version != nil {
		fields = append(fields, visitlog.FieldEngineVersion)
	}
	if m.browser_name != nil {
		fields = append(fields, visitlog.FieldBrowserName)
	}
	if m.browser_version != nil {
		fields = append(fields, visitlog.FieldBrowserVersion)
	}
	if m.mozilla != nil {
		fields = append(fields, visitlog.FieldMozilla)
	}
	if m.bot != nil {
		fields = append(fields, visitlog.FieldBot)
	}
	if m.mobile != nil {
		fields = append(fields, visitlog.FieldMobile)
	}
	if m.created_at != nil {
		fields = append(fields, visitlog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VisitLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case visitlog.FieldPlatform:
		return m.Platform()
	case visitlog.FieldOs:
		return m.Os()
	case visitlog.FieldIP:
		return m.IP()
	case visitlog.FieldReferer:
		return m.Referer()
	case visitlog.FieldEngineName:
		return m.EngineName()
	case visitlog.FieldEngineVersion:
		return m.EngineVersion()
	case visitlog.FieldBrowserName:
		return m.BrowserName()
	case visitlog.FieldBrowserVersion:
		return m.BrowserVersion()
	case visitlog.FieldMozilla:
		return m.Mozilla()
	case visitlog.FieldBot:
		return m.Bot()
	case visitlog.FieldMobile:
		return m.Mobile()
	case visitlog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VisitLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case visitlog.FieldPlatform:
		return m.OldPlatform(ctx)
	case visitlog.FieldOs:
		return m.OldOs(ctx)
	case visitlog.FieldIP:
		return m.OldIP(ctx)
	case visitlog.FieldReferer:
		return m.OldReferer(ctx)
	case visitlog.FieldEngineName:
		return m.OldEngineName(ctx)
	case visitlog.FieldEngineVersion:
		return m.OldEngineVersion(ctx)
	case visitlog.FieldBrowserName:
		return m.OldBrowserName(ctx)
	case visitlog.FieldBrowserVersion:
		return m.OldBrowserVersion(ctx)
	case visitlog.FieldMozilla:
		return m.OldMozilla(ctx)
	case visitlog.FieldBot:
		return m.OldBot(ctx)
	case visitlog.FieldMobile:
		return m.OldMobile(ctx)
	case visitlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown VisitLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case visitlog.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case visitlog.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case visitlog.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case visitlog.FieldReferer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferer(v)
		return nil
	case visitlog.FieldEngineName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngineName(v)
		return nil
	case visitlog.FieldEngineVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngineVersion(v)
		return nil
	case visitlog.FieldBrowserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowserName(v)
		return nil
	case visitlog.FieldBrowserVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowserVersion(v)
		return nil
	case visitlog.FieldMozilla:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMozilla(v)
		return nil
	case visitlog.FieldBot:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBot(v)
		return nil
	case visitlog.FieldMobile:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case visitlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown VisitLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VisitLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VisitLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VisitLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VisitLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VisitLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VisitLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VisitLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VisitLogMutation) ResetField(name string) error {
	switch name {
	case visitlog.FieldPlatform:
		m.ResetPlatform()
		return nil
	case visitlog.FieldOs:
		m.ResetOs()
		return nil
	case visitlog.FieldIP:
		m.ResetIP()
		return nil
	case visitlog.FieldReferer:
		m.ResetReferer()
		return nil
	case visitlog.FieldEngineName:
		m.ResetEngineName()
		return nil
	case visitlog.FieldEngineVersion:
		m.ResetEngineVersion()
		return nil
	case visitlog.FieldBrowserName:
		m.ResetBrowserName()
		return nil
	case visitlog.FieldBrowserVersion:
		m.ResetBrowserVersion()
		return nil
	case visitlog.FieldMozilla:
		m.ResetMozilla()
		return nil
	case visitlog.FieldBot:
		m.ResetBot()
		return nil
	case visitlog.FieldMobile:
		m.ResetMobile()
		return nil
	case visitlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown VisitLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VisitLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.url != nil {
		edges = append(edges, visitlog.EdgeURL)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VisitLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case visitlog.EdgeURL:
		if id := m.url; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VisitLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VisitLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VisitLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedurl {
		edges = append(edges, visitlog.EdgeURL)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VisitLogMutation) EdgeCleared(name string) bool {
	switch name {
	case visitlog.EdgeURL:
		return m.clearedurl
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VisitLogMutation) ClearEdge(name string) error {
	switch name {
	case visitlog.EdgeURL:
		m.ClearURL()
		return nil
	}
	return fmt.Errorf("unknown VisitLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VisitLogMutation) ResetEdge(name string) error {
	switch name {
	case visitlog.EdgeURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown VisitLog edge %s", name)
}
