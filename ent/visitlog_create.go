// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"long2ice/longurl/ent/url"
	"long2ice/longurl/ent/visitlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitLogCreate is the builder for creating a VisitLog entity.
type VisitLogCreate struct {
	config
	mutation *VisitLogMutation
	hooks    []Hook
}

// SetPlatform sets the "platform" field.
func (vlc *VisitLogCreate) SetPlatform(s string) *VisitLogCreate {
	vlc.mutation.SetPlatform(s)
	return vlc
}

// SetOs sets the "os" field.
func (vlc *VisitLogCreate) SetOs(s string) *VisitLogCreate {
	vlc.mutation.SetOs(s)
	return vlc
}

// SetIP sets the "ip" field.
func (vlc *VisitLogCreate) SetIP(s string) *VisitLogCreate {
	vlc.mutation.SetIP(s)
	return vlc
}

// SetReferer sets the "referer" field.
func (vlc *VisitLogCreate) SetReferer(s string) *VisitLogCreate {
	vlc.mutation.SetReferer(s)
	return vlc
}

// SetEngineName sets the "engine_name" field.
func (vlc *VisitLogCreate) SetEngineName(s string) *VisitLogCreate {
	vlc.mutation.SetEngineName(s)
	return vlc
}

// SetEngineVersion sets the "engine_version" field.
func (vlc *VisitLogCreate) SetEngineVersion(s string) *VisitLogCreate {
	vlc.mutation.SetEngineVersion(s)
	return vlc
}

// SetBrowserName sets the "browser_name" field.
func (vlc *VisitLogCreate) SetBrowserName(s string) *VisitLogCreate {
	vlc.mutation.SetBrowserName(s)
	return vlc
}

// SetBrowserVersion sets the "browser_version" field.
func (vlc *VisitLogCreate) SetBrowserVersion(s string) *VisitLogCreate {
	vlc.mutation.SetBrowserVersion(s)
	return vlc
}

// SetMozilla sets the "mozilla" field.
func (vlc *VisitLogCreate) SetMozilla(s string) *VisitLogCreate {
	vlc.mutation.SetMozilla(s)
	return vlc
}

// SetBot sets the "bot" field.
func (vlc *VisitLogCreate) SetBot(b bool) *VisitLogCreate {
	vlc.mutation.SetBot(b)
	return vlc
}

// SetMobile sets the "mobile" field.
func (vlc *VisitLogCreate) SetMobile(b bool) *VisitLogCreate {
	vlc.mutation.SetMobile(b)
	return vlc
}

// SetCreatedAt sets the "created_at" field.
func (vlc *VisitLogCreate) SetCreatedAt(t time.Time) *VisitLogCreate {
	vlc.mutation.SetCreatedAt(t)
	return vlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vlc *VisitLogCreate) SetNillableCreatedAt(t *time.Time) *VisitLogCreate {
	if t != nil {
		vlc.SetCreatedAt(*t)
	}
	return vlc
}

// SetURLID sets the "url" edge to the Url entity by ID.
func (vlc *VisitLogCreate) SetURLID(id int) *VisitLogCreate {
	vlc.mutation.SetURLID(id)
	return vlc
}

// SetNillableURLID sets the "url" edge to the Url entity by ID if the given value is not nil.
func (vlc *VisitLogCreate) SetNillableURLID(id *int) *VisitLogCreate {
	if id != nil {
		vlc = vlc.SetURLID(*id)
	}
	return vlc
}

// SetURL sets the "url" edge to the Url entity.
func (vlc *VisitLogCreate) SetURL(u *Url) *VisitLogCreate {
	return vlc.SetURLID(u.ID)
}

// Mutation returns the VisitLogMutation object of the builder.
func (vlc *VisitLogCreate) Mutation() *VisitLogMutation {
	return vlc.mutation
}

// Save creates the VisitLog in the database.
func (vlc *VisitLogCreate) Save(ctx context.Context) (*VisitLog, error) {
	var (
		err  error
		node *VisitLog
	)
	vlc.defaults()
	if len(vlc.hooks) == 0 {
		if err = vlc.check(); err != nil {
			return nil, err
		}
		node, err = vlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vlc.check(); err != nil {
				return nil, err
			}
			vlc.mutation = mutation
			if node, err = vlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vlc.hooks) - 1; i >= 0; i-- {
			if vlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vlc *VisitLogCreate) SaveX(ctx context.Context) *VisitLog {
	v, err := vlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlc *VisitLogCreate) Exec(ctx context.Context) error {
	_, err := vlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlc *VisitLogCreate) ExecX(ctx context.Context) {
	if err := vlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vlc *VisitLogCreate) defaults() {
	if _, ok := vlc.mutation.CreatedAt(); !ok {
		v := visitlog.DefaultCreatedAt()
		vlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlc *VisitLogCreate) check() error {
	if _, ok := vlc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "platform"`)}
	}
	if _, ok := vlc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "os"`)}
	}
	if _, ok := vlc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ip"`)}
	}
	if _, ok := vlc.mutation.Referer(); !ok {
		return &ValidationError{Name: "referer", err: errors.New(`ent: missing required field "referer"`)}
	}
	if _, ok := vlc.mutation.EngineName(); !ok {
		return &ValidationError{Name: "engine_name", err: errors.New(`ent: missing required field "engine_name"`)}
	}
	if _, ok := vlc.mutation.EngineVersion(); !ok {
		return &ValidationError{Name: "engine_version", err: errors.New(`ent: missing required field "engine_version"`)}
	}
	if _, ok := vlc.mutation.BrowserName(); !ok {
		return &ValidationError{Name: "browser_name", err: errors.New(`ent: missing required field "browser_name"`)}
	}
	if _, ok := vlc.mutation.BrowserVersion(); !ok {
		return &ValidationError{Name: "browser_version", err: errors.New(`ent: missing required field "browser_version"`)}
	}
	if _, ok := vlc.mutation.Mozilla(); !ok {
		return &ValidationError{Name: "mozilla", err: errors.New(`ent: missing required field "mozilla"`)}
	}
	if _, ok := vlc.mutation.Bot(); !ok {
		return &ValidationError{Name: "bot", err: errors.New(`ent: missing required field "bot"`)}
	}
	if _, ok := vlc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "mobile"`)}
	}
	if _, ok := vlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	return nil
}

func (vlc *VisitLogCreate) sqlSave(ctx context.Context) (*VisitLog, error) {
	_node, _spec := vlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vlc *VisitLogCreate) createSpec() (*VisitLog, *sqlgraph.CreateSpec) {
	var (
		_node = &VisitLog{config: vlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: visitlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitlog.FieldID,
			},
		}
	)
	if value, ok := vlc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := vlc.mutation.Os(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldOs,
		})
		_node.Os = value
	}
	if value, ok := vlc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := vlc.mutation.Referer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldReferer,
		})
		_node.Referer = value
	}
	if value, ok := vlc.mutation.EngineName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldEngineName,
		})
		_node.EngineName = value
	}
	if value, ok := vlc.mutation.EngineVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldEngineVersion,
		})
		_node.EngineVersion = value
	}
	if value, ok := vlc.mutation.BrowserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldBrowserName,
		})
		_node.BrowserName = value
	}
	if value, ok := vlc.mutation.BrowserVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldBrowserVersion,
		})
		_node.BrowserVersion = value
	}
	if value, ok := vlc.mutation.Mozilla(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldMozilla,
		})
		_node.Mozilla = value
	}
	if value, ok := vlc.mutation.Bot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: visitlog.FieldBot,
		})
		_node.Bot = value
	}
	if value, ok := vlc.mutation.Mobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: visitlog.FieldMobile,
		})
		_node.Mobile = value
	}
	if value, ok := vlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: visitlog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := vlc.mutation.URLIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitlog.URLTable,
			Columns: []string{visitlog.URLColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: url.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.url_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VisitLogCreateBulk is the builder for creating many VisitLog entities in bulk.
type VisitLogCreateBulk struct {
	config
	builders []*VisitLogCreate
}

// Save creates the VisitLog entities in the database.
func (vlcb *VisitLogCreateBulk) Save(ctx context.Context) ([]*VisitLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vlcb.builders))
	nodes := make([]*VisitLog, len(vlcb.builders))
	mutators := make([]Mutator, len(vlcb.builders))
	for i := range vlcb.builders {
		func(i int, root context.Context) {
			builder := vlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VisitLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vlcb *VisitLogCreateBulk) SaveX(ctx context.Context) []*VisitLog {
	v, err := vlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlcb *VisitLogCreateBulk) Exec(ctx context.Context) error {
	_, err := vlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlcb *VisitLogCreateBulk) ExecX(ctx context.Context) {
	if err := vlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
