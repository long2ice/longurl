// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/long2ice/longurl/ent/predicate"
	"github.com/long2ice/longurl/ent/url"
	"github.com/long2ice/longurl/ent/visitlog"
)

// VisitLogUpdate is the builder for updating VisitLog entities.
type VisitLogUpdate struct {
	config
	hooks    []Hook
	mutation *VisitLogMutation
}

// Where appends a list predicates to the VisitLogUpdate builder.
func (vlu *VisitLogUpdate) Where(ps ...predicate.VisitLog) *VisitLogUpdate {
	vlu.mutation.Where(ps...)
	return vlu
}

// SetPlatform sets the "platform" field.
func (vlu *VisitLogUpdate) SetPlatform(s string) *VisitLogUpdate {
	vlu.mutation.SetPlatform(s)
	return vlu
}

// SetOs sets the "os" field.
func (vlu *VisitLogUpdate) SetOs(s string) *VisitLogUpdate {
	vlu.mutation.SetOs(s)
	return vlu
}

// SetIP sets the "ip" field.
func (vlu *VisitLogUpdate) SetIP(s string) *VisitLogUpdate {
	vlu.mutation.SetIP(s)
	return vlu
}

// SetReferer sets the "referer" field.
func (vlu *VisitLogUpdate) SetReferer(s string) *VisitLogUpdate {
	vlu.mutation.SetReferer(s)
	return vlu
}

// SetEngineName sets the "engine_name" field.
func (vlu *VisitLogUpdate) SetEngineName(s string) *VisitLogUpdate {
	vlu.mutation.SetEngineName(s)
	return vlu
}

// SetEngineVersion sets the "engine_version" field.
func (vlu *VisitLogUpdate) SetEngineVersion(s string) *VisitLogUpdate {
	vlu.mutation.SetEngineVersion(s)
	return vlu
}

// SetBrowserName sets the "browser_name" field.
func (vlu *VisitLogUpdate) SetBrowserName(s string) *VisitLogUpdate {
	vlu.mutation.SetBrowserName(s)
	return vlu
}

// SetBrowserVersion sets the "browser_version" field.
func (vlu *VisitLogUpdate) SetBrowserVersion(s string) *VisitLogUpdate {
	vlu.mutation.SetBrowserVersion(s)
	return vlu
}

// SetMozilla sets the "mozilla" field.
func (vlu *VisitLogUpdate) SetMozilla(s string) *VisitLogUpdate {
	vlu.mutation.SetMozilla(s)
	return vlu
}

// SetBot sets the "bot" field.
func (vlu *VisitLogUpdate) SetBot(b bool) *VisitLogUpdate {
	vlu.mutation.SetBot(b)
	return vlu
}

// SetMobile sets the "mobile" field.
func (vlu *VisitLogUpdate) SetMobile(b bool) *VisitLogUpdate {
	vlu.mutation.SetMobile(b)
	return vlu
}

// SetCreatedAt sets the "created_at" field.
func (vlu *VisitLogUpdate) SetCreatedAt(t time.Time) *VisitLogUpdate {
	vlu.mutation.SetCreatedAt(t)
	return vlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vlu *VisitLogUpdate) SetNillableCreatedAt(t *time.Time) *VisitLogUpdate {
	if t != nil {
		vlu.SetCreatedAt(*t)
	}
	return vlu
}

// SetURLID sets the "url" edge to the Url entity by ID.
func (vlu *VisitLogUpdate) SetURLID(id int) *VisitLogUpdate {
	vlu.mutation.SetURLID(id)
	return vlu
}

// SetNillableURLID sets the "url" edge to the Url entity by ID if the given value is not nil.
func (vlu *VisitLogUpdate) SetNillableURLID(id *int) *VisitLogUpdate {
	if id != nil {
		vlu = vlu.SetURLID(*id)
	}
	return vlu
}

// SetURL sets the "url" edge to the Url entity.
func (vlu *VisitLogUpdate) SetURL(u *Url) *VisitLogUpdate {
	return vlu.SetURLID(u.ID)
}

// Mutation returns the VisitLogMutation object of the builder.
func (vlu *VisitLogUpdate) Mutation() *VisitLogMutation {
	return vlu.mutation
}

// ClearURL clears the "url" edge to the Url entity.
func (vlu *VisitLogUpdate) ClearURL() *VisitLogUpdate {
	vlu.mutation.ClearURL()
	return vlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlu *VisitLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vlu.hooks) == 0 {
		affected, err = vlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vlu.mutation = mutation
			affected, err = vlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vlu.hooks) - 1; i >= 0; i-- {
			if vlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vlu *VisitLogUpdate) SaveX(ctx context.Context) int {
	affected, err := vlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlu *VisitLogUpdate) Exec(ctx context.Context) error {
	_, err := vlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlu *VisitLogUpdate) ExecX(ctx context.Context) {
	if err := vlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vlu *VisitLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitlog.Table,
			Columns: visitlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitlog.FieldID,
			},
		},
	}
	if ps := vlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldPlatform,
		})
	}
	if value, ok := vlu.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldOs,
		})
	}
	if value, ok := vlu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldIP,
		})
	}
	if value, ok := vlu.mutation.Referer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldReferer,
		})
	}
	if value, ok := vlu.mutation.EngineName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldEngineName,
		})
	}
	if value, ok := vlu.mutation.EngineVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldEngineVersion,
		})
	}
	if value, ok := vlu.mutation.BrowserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldBrowserName,
		})
	}
	if value, ok := vlu.mutation.BrowserVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldBrowserVersion,
		})
	}
	if value, ok := vlu.mutation.Mozilla(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldMozilla,
		})
	}
	if value, ok := vlu.mutation.Bot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: visitlog.FieldBot,
		})
	}
	if value, ok := vlu.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: visitlog.FieldMobile,
		})
	}
	if value, ok := vlu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: visitlog.FieldCreatedAt,
		})
	}
	if vlu.mutation.URLCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitlog.URLTable,
			Columns: []string{visitlog.URLColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: url.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vlu.mutation.URLIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitlog.URLTable,
			Columns: []string{visitlog.URLColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: url.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VisitLogUpdateOne is the builder for updating a single VisitLog entity.
type VisitLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitLogMutation
}

// SetPlatform sets the "platform" field.
func (vluo *VisitLogUpdateOne) SetPlatform(s string) *VisitLogUpdateOne {
	vluo.mutation.SetPlatform(s)
	return vluo
}

// SetOs sets the "os" field.
func (vluo *VisitLogUpdateOne) SetOs(s string) *VisitLogUpdateOne {
	vluo.mutation.SetOs(s)
	return vluo
}

// SetIP sets the "ip" field.
func (vluo *VisitLogUpdateOne) SetIP(s string) *VisitLogUpdateOne {
	vluo.mutation.SetIP(s)
	return vluo
}

// SetReferer sets the "referer" field.
func (vluo *VisitLogUpdateOne) SetReferer(s string) *VisitLogUpdateOne {
	vluo.mutation.SetReferer(s)
	return vluo
}

// SetEngineName sets the "engine_name" field.
func (vluo *VisitLogUpdateOne) SetEngineName(s string) *VisitLogUpdateOne {
	vluo.mutation.SetEngineName(s)
	return vluo
}

// SetEngineVersion sets the "engine_version" field.
func (vluo *VisitLogUpdateOne) SetEngineVersion(s string) *VisitLogUpdateOne {
	vluo.mutation.SetEngineVersion(s)
	return vluo
}

// SetBrowserName sets the "browser_name" field.
func (vluo *VisitLogUpdateOne) SetBrowserName(s string) *VisitLogUpdateOne {
	vluo.mutation.SetBrowserName(s)
	return vluo
}

// SetBrowserVersion sets the "browser_version" field.
func (vluo *VisitLogUpdateOne) SetBrowserVersion(s string) *VisitLogUpdateOne {
	vluo.mutation.SetBrowserVersion(s)
	return vluo
}

// SetMozilla sets the "mozilla" field.
func (vluo *VisitLogUpdateOne) SetMozilla(s string) *VisitLogUpdateOne {
	vluo.mutation.SetMozilla(s)
	return vluo
}

// SetBot sets the "bot" field.
func (vluo *VisitLogUpdateOne) SetBot(b bool) *VisitLogUpdateOne {
	vluo.mutation.SetBot(b)
	return vluo
}

// SetMobile sets the "mobile" field.
func (vluo *VisitLogUpdateOne) SetMobile(b bool) *VisitLogUpdateOne {
	vluo.mutation.SetMobile(b)
	return vluo
}

// SetCreatedAt sets the "created_at" field.
func (vluo *VisitLogUpdateOne) SetCreatedAt(t time.Time) *VisitLogUpdateOne {
	vluo.mutation.SetCreatedAt(t)
	return vluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vluo *VisitLogUpdateOne) SetNillableCreatedAt(t *time.Time) *VisitLogUpdateOne {
	if t != nil {
		vluo.SetCreatedAt(*t)
	}
	return vluo
}

// SetURLID sets the "url" edge to the Url entity by ID.
func (vluo *VisitLogUpdateOne) SetURLID(id int) *VisitLogUpdateOne {
	vluo.mutation.SetURLID(id)
	return vluo
}

// SetNillableURLID sets the "url" edge to the Url entity by ID if the given value is not nil.
func (vluo *VisitLogUpdateOne) SetNillableURLID(id *int) *VisitLogUpdateOne {
	if id != nil {
		vluo = vluo.SetURLID(*id)
	}
	return vluo
}

// SetURL sets the "url" edge to the Url entity.
func (vluo *VisitLogUpdateOne) SetURL(u *Url) *VisitLogUpdateOne {
	return vluo.SetURLID(u.ID)
}

// Mutation returns the VisitLogMutation object of the builder.
func (vluo *VisitLogUpdateOne) Mutation() *VisitLogMutation {
	return vluo.mutation
}

// ClearURL clears the "url" edge to the Url entity.
func (vluo *VisitLogUpdateOne) ClearURL() *VisitLogUpdateOne {
	vluo.mutation.ClearURL()
	return vluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vluo *VisitLogUpdateOne) Select(field string, fields ...string) *VisitLogUpdateOne {
	vluo.fields = append([]string{field}, fields...)
	return vluo
}

// Save executes the query and returns the updated VisitLog entity.
func (vluo *VisitLogUpdateOne) Save(ctx context.Context) (*VisitLog, error) {
	var (
		err  error
		node *VisitLog
	)
	if len(vluo.hooks) == 0 {
		node, err = vluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vluo.mutation = mutation
			node, err = vluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vluo.hooks) - 1; i >= 0; i-- {
			if vluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vluo *VisitLogUpdateOne) SaveX(ctx context.Context) *VisitLog {
	node, err := vluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vluo *VisitLogUpdateOne) Exec(ctx context.Context) error {
	_, err := vluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vluo *VisitLogUpdateOne) ExecX(ctx context.Context) {
	if err := vluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vluo *VisitLogUpdateOne) sqlSave(ctx context.Context) (_node *VisitLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitlog.Table,
			Columns: visitlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitlog.FieldID,
			},
		},
	}
	id, ok := vluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VisitLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitlog.FieldID)
		for _, f := range fields {
			if !visitlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visitlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vluo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldPlatform,
		})
	}
	if value, ok := vluo.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldOs,
		})
	}
	if value, ok := vluo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldIP,
		})
	}
	if value, ok := vluo.mutation.Referer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldReferer,
		})
	}
	if value, ok := vluo.mutation.EngineName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldEngineName,
		})
	}
	if value, ok := vluo.mutation.EngineVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldEngineVersion,
		})
	}
	if value, ok := vluo.mutation.BrowserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldBrowserName,
		})
	}
	if value, ok := vluo.mutation.BrowserVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldBrowserVersion,
		})
	}
	if value, ok := vluo.mutation.Mozilla(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visitlog.FieldMozilla,
		})
	}
	if value, ok := vluo.mutation.Bot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: visitlog.FieldBot,
		})
	}
	if value, ok := vluo.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: visitlog.FieldMobile,
		})
	}
	if value, ok := vluo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: visitlog.FieldCreatedAt,
		})
	}
	if vluo.mutation.URLCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitlog.URLTable,
			Columns: []string{visitlog.URLColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: url.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vluo.mutation.URLIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visitlog.URLTable,
			Columns: []string{visitlog.URLColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: url.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VisitLog{config: vluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
