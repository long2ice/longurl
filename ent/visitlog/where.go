// Code generated by entc, DO NOT EDIT.

package visitlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/long2ice/longurl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Referer applies equality check predicate on the "referer" field. It's identical to RefererEQ.
func Referer(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferer), v))
	})
}

// EngineName applies equality check predicate on the "engine_name" field. It's identical to EngineNameEQ.
func EngineName(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngineName), v))
	})
}

// EngineVersion applies equality check predicate on the "engine_version" field. It's identical to EngineVersionEQ.
func EngineVersion(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngineVersion), v))
	})
}

// BrowserName applies equality check predicate on the "browser_name" field. It's identical to BrowserNameEQ.
func BrowserName(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowserName), v))
	})
}

// BrowserVersion applies equality check predicate on the "browser_version" field. It's identical to BrowserVersionEQ.
func BrowserVersion(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowserVersion), v))
	})
}

// Mozilla applies equality check predicate on the "mozilla" field. It's identical to MozillaEQ.
func Mozilla(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMozilla), v))
	})
}

// Bot applies equality check predicate on the "bot" field. It's identical to BotEQ.
func Bot(v bool) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBot), v))
	})
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v bool) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobile), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOs), v))
	})
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOs), v...))
	})
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOs), v...))
	})
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOs), v))
	})
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOs), v))
	})
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOs), v))
	})
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOs), v))
	})
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOs), v))
	})
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOs), v))
	})
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOs), v))
	})
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOs), v))
	})
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOs), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// RefererEQ applies the EQ predicate on the "referer" field.
func RefererEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferer), v))
	})
}

// RefererNEQ applies the NEQ predicate on the "referer" field.
func RefererNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferer), v))
	})
}

// RefererIn applies the In predicate on the "referer" field.
func RefererIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReferer), v...))
	})
}

// RefererNotIn applies the NotIn predicate on the "referer" field.
func RefererNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReferer), v...))
	})
}

// RefererGT applies the GT predicate on the "referer" field.
func RefererGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferer), v))
	})
}

// RefererGTE applies the GTE predicate on the "referer" field.
func RefererGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferer), v))
	})
}

// RefererLT applies the LT predicate on the "referer" field.
func RefererLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferer), v))
	})
}

// RefererLTE applies the LTE predicate on the "referer" field.
func RefererLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferer), v))
	})
}

// RefererContains applies the Contains predicate on the "referer" field.
func RefererContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferer), v))
	})
}

// RefererHasPrefix applies the HasPrefix predicate on the "referer" field.
func RefererHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferer), v))
	})
}

// RefererHasSuffix applies the HasSuffix predicate on the "referer" field.
func RefererHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferer), v))
	})
}

// RefererEqualFold applies the EqualFold predicate on the "referer" field.
func RefererEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferer), v))
	})
}

// RefererContainsFold applies the ContainsFold predicate on the "referer" field.
func RefererContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferer), v))
	})
}

// EngineNameEQ applies the EQ predicate on the "engine_name" field.
func EngineNameEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngineName), v))
	})
}

// EngineNameNEQ applies the NEQ predicate on the "engine_name" field.
func EngineNameNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEngineName), v))
	})
}

// EngineNameIn applies the In predicate on the "engine_name" field.
func EngineNameIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEngineName), v...))
	})
}

// EngineNameNotIn applies the NotIn predicate on the "engine_name" field.
func EngineNameNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEngineName), v...))
	})
}

// EngineNameGT applies the GT predicate on the "engine_name" field.
func EngineNameGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEngineName), v))
	})
}

// EngineNameGTE applies the GTE predicate on the "engine_name" field.
func EngineNameGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEngineName), v))
	})
}

// EngineNameLT applies the LT predicate on the "engine_name" field.
func EngineNameLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEngineName), v))
	})
}

// EngineNameLTE applies the LTE predicate on the "engine_name" field.
func EngineNameLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEngineName), v))
	})
}

// EngineNameContains applies the Contains predicate on the "engine_name" field.
func EngineNameContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEngineName), v))
	})
}

// EngineNameHasPrefix applies the HasPrefix predicate on the "engine_name" field.
func EngineNameHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEngineName), v))
	})
}

// EngineNameHasSuffix applies the HasSuffix predicate on the "engine_name" field.
func EngineNameHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEngineName), v))
	})
}

// EngineNameEqualFold applies the EqualFold predicate on the "engine_name" field.
func EngineNameEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEngineName), v))
	})
}

// EngineNameContainsFold applies the ContainsFold predicate on the "engine_name" field.
func EngineNameContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEngineName), v))
	})
}

// EngineVersionEQ applies the EQ predicate on the "engine_version" field.
func EngineVersionEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionNEQ applies the NEQ predicate on the "engine_version" field.
func EngineVersionNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionIn applies the In predicate on the "engine_version" field.
func EngineVersionIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEngineVersion), v...))
	})
}

// EngineVersionNotIn applies the NotIn predicate on the "engine_version" field.
func EngineVersionNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEngineVersion), v...))
	})
}

// EngineVersionGT applies the GT predicate on the "engine_version" field.
func EngineVersionGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionGTE applies the GTE predicate on the "engine_version" field.
func EngineVersionGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionLT applies the LT predicate on the "engine_version" field.
func EngineVersionLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionLTE applies the LTE predicate on the "engine_version" field.
func EngineVersionLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionContains applies the Contains predicate on the "engine_version" field.
func EngineVersionContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionHasPrefix applies the HasPrefix predicate on the "engine_version" field.
func EngineVersionHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionHasSuffix applies the HasSuffix predicate on the "engine_version" field.
func EngineVersionHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionEqualFold applies the EqualFold predicate on the "engine_version" field.
func EngineVersionEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEngineVersion), v))
	})
}

// EngineVersionContainsFold applies the ContainsFold predicate on the "engine_version" field.
func EngineVersionContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEngineVersion), v))
	})
}

// BrowserNameEQ applies the EQ predicate on the "browser_name" field.
func BrowserNameEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowserName), v))
	})
}

// BrowserNameNEQ applies the NEQ predicate on the "browser_name" field.
func BrowserNameNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrowserName), v))
	})
}

// BrowserNameIn applies the In predicate on the "browser_name" field.
func BrowserNameIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrowserName), v...))
	})
}

// BrowserNameNotIn applies the NotIn predicate on the "browser_name" field.
func BrowserNameNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrowserName), v...))
	})
}

// BrowserNameGT applies the GT predicate on the "browser_name" field.
func BrowserNameGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrowserName), v))
	})
}

// BrowserNameGTE applies the GTE predicate on the "browser_name" field.
func BrowserNameGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrowserName), v))
	})
}

// BrowserNameLT applies the LT predicate on the "browser_name" field.
func BrowserNameLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrowserName), v))
	})
}

// BrowserNameLTE applies the LTE predicate on the "browser_name" field.
func BrowserNameLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrowserName), v))
	})
}

// BrowserNameContains applies the Contains predicate on the "browser_name" field.
func BrowserNameContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrowserName), v))
	})
}

// BrowserNameHasPrefix applies the HasPrefix predicate on the "browser_name" field.
func BrowserNameHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrowserName), v))
	})
}

// BrowserNameHasSuffix applies the HasSuffix predicate on the "browser_name" field.
func BrowserNameHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrowserName), v))
	})
}

// BrowserNameEqualFold applies the EqualFold predicate on the "browser_name" field.
func BrowserNameEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrowserName), v))
	})
}

// BrowserNameContainsFold applies the ContainsFold predicate on the "browser_name" field.
func BrowserNameContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrowserName), v))
	})
}

// BrowserVersionEQ applies the EQ predicate on the "browser_version" field.
func BrowserVersionEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionNEQ applies the NEQ predicate on the "browser_version" field.
func BrowserVersionNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionIn applies the In predicate on the "browser_version" field.
func BrowserVersionIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrowserVersion), v...))
	})
}

// BrowserVersionNotIn applies the NotIn predicate on the "browser_version" field.
func BrowserVersionNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrowserVersion), v...))
	})
}

// BrowserVersionGT applies the GT predicate on the "browser_version" field.
func BrowserVersionGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionGTE applies the GTE predicate on the "browser_version" field.
func BrowserVersionGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionLT applies the LT predicate on the "browser_version" field.
func BrowserVersionLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionLTE applies the LTE predicate on the "browser_version" field.
func BrowserVersionLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionContains applies the Contains predicate on the "browser_version" field.
func BrowserVersionContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionHasPrefix applies the HasPrefix predicate on the "browser_version" field.
func BrowserVersionHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionHasSuffix applies the HasSuffix predicate on the "browser_version" field.
func BrowserVersionHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionEqualFold applies the EqualFold predicate on the "browser_version" field.
func BrowserVersionEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrowserVersion), v))
	})
}

// BrowserVersionContainsFold applies the ContainsFold predicate on the "browser_version" field.
func BrowserVersionContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrowserVersion), v))
	})
}

// MozillaEQ applies the EQ predicate on the "mozilla" field.
func MozillaEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMozilla), v))
	})
}

// MozillaNEQ applies the NEQ predicate on the "mozilla" field.
func MozillaNEQ(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMozilla), v))
	})
}

// MozillaIn applies the In predicate on the "mozilla" field.
func MozillaIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMozilla), v...))
	})
}

// MozillaNotIn applies the NotIn predicate on the "mozilla" field.
func MozillaNotIn(vs ...string) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMozilla), v...))
	})
}

// MozillaGT applies the GT predicate on the "mozilla" field.
func MozillaGT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMozilla), v))
	})
}

// MozillaGTE applies the GTE predicate on the "mozilla" field.
func MozillaGTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMozilla), v))
	})
}

// MozillaLT applies the LT predicate on the "mozilla" field.
func MozillaLT(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMozilla), v))
	})
}

// MozillaLTE applies the LTE predicate on the "mozilla" field.
func MozillaLTE(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMozilla), v))
	})
}

// MozillaContains applies the Contains predicate on the "mozilla" field.
func MozillaContains(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMozilla), v))
	})
}

// MozillaHasPrefix applies the HasPrefix predicate on the "mozilla" field.
func MozillaHasPrefix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMozilla), v))
	})
}

// MozillaHasSuffix applies the HasSuffix predicate on the "mozilla" field.
func MozillaHasSuffix(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMozilla), v))
	})
}

// MozillaEqualFold applies the EqualFold predicate on the "mozilla" field.
func MozillaEqualFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMozilla), v))
	})
}

// MozillaContainsFold applies the ContainsFold predicate on the "mozilla" field.
func MozillaContainsFold(v string) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMozilla), v))
	})
}

// BotEQ applies the EQ predicate on the "bot" field.
func BotEQ(v bool) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBot), v))
	})
}

// BotNEQ applies the NEQ predicate on the "bot" field.
func BotNEQ(v bool) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBot), v))
	})
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v bool) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMobile), v))
	})
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v bool) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMobile), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VisitLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VisitLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasURL applies the HasEdge predicate on the "url" edge.
func HasURL() predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(URLTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, URLTable, URLColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasURLWith applies the HasEdge predicate on the "url" edge with a given conditions (other predicates).
func HasURLWith(preds ...predicate.Url) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(URLInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, URLTable, URLColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VisitLog) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VisitLog) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VisitLog) predicate.VisitLog {
	return predicate.VisitLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
