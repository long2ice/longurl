// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"long2ice/longurl/ent/url"
	"long2ice/longurl/ent/visitlog"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// VisitLog is the model entity for the VisitLog schema.
type VisitLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// EngineName holds the value of the "engine_name" field.
	EngineName string `json:"engine_name,omitempty"`
	// EngineVersion holds the value of the "engine_version" field.
	EngineVersion string `json:"engine_version,omitempty"`
	// BrowserName holds the value of the "browser_name" field.
	BrowserName string `json:"browser_name,omitempty"`
	// BrowserVersion holds the value of the "browser_version" field.
	BrowserVersion string `json:"browser_version,omitempty"`
	// Mozilla holds the value of the "mozilla" field.
	Mozilla string `json:"mozilla,omitempty"`
	// Bot holds the value of the "bot" field.
	Bot bool `json:"bot,omitempty"`
	// Mobile holds the value of the "mobile" field.
	Mobile bool `json:"mobile,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VisitLogQuery when eager-loading is set.
	Edges    VisitLogEdges `json:"edges"`
	url_logs *int
}

// VisitLogEdges holds the relations/edges for other nodes in the graph.
type VisitLogEdges struct {
	// URL holds the value of the url edge.
	URL *Url `json:"url,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// URLOrErr returns the URL value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VisitLogEdges) URLOrErr() (*Url, error) {
	if e.loadedTypes[0] {
		if e.URL == nil {
			// The edge url was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: url.Label}
		}
		return e.URL, nil
	}
	return nil, &NotLoadedError{edge: "url"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VisitLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case visitlog.FieldBot, visitlog.FieldMobile:
			values[i] = new(sql.NullBool)
		case visitlog.FieldID:
			values[i] = new(sql.NullInt64)
		case visitlog.FieldPlatform, visitlog.FieldOs, visitlog.FieldEngineName, visitlog.FieldEngineVersion, visitlog.FieldBrowserName, visitlog.FieldBrowserVersion, visitlog.FieldMozilla:
			values[i] = new(sql.NullString)
		case visitlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case visitlog.ForeignKeys[0]: // url_logs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VisitLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VisitLog fields.
func (vl *VisitLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case visitlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vl.ID = int(value.Int64)
		case visitlog.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				vl.Platform = value.String
			}
		case visitlog.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				vl.Os = value.String
			}
		case visitlog.FieldEngineName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine_name", values[i])
			} else if value.Valid {
				vl.EngineName = value.String
			}
		case visitlog.FieldEngineVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine_version", values[i])
			} else if value.Valid {
				vl.EngineVersion = value.String
			}
		case visitlog.FieldBrowserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser_name", values[i])
			} else if value.Valid {
				vl.BrowserName = value.String
			}
		case visitlog.FieldBrowserVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser_version", values[i])
			} else if value.Valid {
				vl.BrowserVersion = value.String
			}
		case visitlog.FieldMozilla:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mozilla", values[i])
			} else if value.Valid {
				vl.Mozilla = value.String
			}
		case visitlog.FieldBot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bot", values[i])
			} else if value.Valid {
				vl.Bot = value.Bool
			}
		case visitlog.FieldMobile:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				vl.Mobile = value.Bool
			}
		case visitlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vl.CreatedAt = value.Time
			}
		case visitlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field url_logs", value)
			} else if value.Valid {
				vl.url_logs = new(int)
				*vl.url_logs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryURL queries the "url" edge of the VisitLog entity.
func (vl *VisitLog) QueryURL() *URLQuery {
	return (&VisitLogClient{config: vl.config}).QueryURL(vl)
}

// Update returns a builder for updating this VisitLog.
// Note that you need to call VisitLog.Unwrap() before calling this method if this VisitLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (vl *VisitLog) Update() *VisitLogUpdateOne {
	return (&VisitLogClient{config: vl.config}).UpdateOne(vl)
}

// Unwrap unwraps the VisitLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vl *VisitLog) Unwrap() *VisitLog {
	tx, ok := vl.config.driver.(*txDriver)
	if !ok {
		panic("ent: VisitLog is not a transactional entity")
	}
	vl.config.driver = tx.drv
	return vl
}

// String implements the fmt.Stringer.
func (vl *VisitLog) String() string {
	var builder strings.Builder
	builder.WriteString("VisitLog(")
	builder.WriteString(fmt.Sprintf("id=%v", vl.ID))
	builder.WriteString(", platform=")
	builder.WriteString(vl.Platform)
	builder.WriteString(", os=")
	builder.WriteString(vl.Os)
	builder.WriteString(", engine_name=")
	builder.WriteString(vl.EngineName)
	builder.WriteString(", engine_version=")
	builder.WriteString(vl.EngineVersion)
	builder.WriteString(", browser_name=")
	builder.WriteString(vl.BrowserName)
	builder.WriteString(", browser_version=")
	builder.WriteString(vl.BrowserVersion)
	builder.WriteString(", mozilla=")
	builder.WriteString(vl.Mozilla)
	builder.WriteString(", bot=")
	builder.WriteString(fmt.Sprintf("%v", vl.Bot))
	builder.WriteString(", mobile=")
	builder.WriteString(fmt.Sprintf("%v", vl.Mobile))
	builder.WriteString(", created_at=")
	builder.WriteString(vl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VisitLogs is a parsable slice of VisitLog.
type VisitLogs []*VisitLog

func (vl VisitLogs) config(cfg config) {
	for _i := range vl {
		vl[_i].config = cfg
	}
}
